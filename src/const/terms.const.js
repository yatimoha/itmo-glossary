export const terms = [
  {
    title: 'Программа',
    description: 'Описание на формальном языке, «понятном» компьютеру, последовательности действий, которые необходимо выполнить над данными для решения поставленной задачи.',
  },
  {
    title: 'Многопоточность',
    description: 'Концепция в программировании, при которой программа может выполняться параллельно в нескольких потоках.',
  },
  {
    title: 'Процесс',
    description: 'Экземпляр запущенной программы, с выделением памяти исключительно для этого процесса. В каждый момент времени будет выполняться только одна машинная команда. Порядок выполнения команд определяется кодом программы.',
  },
  {
    title: 'Поток',
    description: 'Абстракция, используемая для чтения или записи файлов, сокетов. Поток разделяет память с процессом, который его породил.',
  },
  {
    title: 'Преимущества потоков',
    description: 'Возможность создания дополнительного потока или пула потоков, освобождая главный поток для взаимодействия с пользователями или другими программами и поручив ему проверку наличия запросов на новое взаимодействие в бесконечном цикле.',
  },
  {
    title: 'Выделенные исполнители',
    description: 'Предоставляют возможность запуска новой среды выполнения JavaScript. Интерпретатор, запущенный таким образом, функционирует в отдельном потоке от того, который его инициировал.',
  },
  {
    title: 'Конкурентность',
    description: 'Подразумевает перекрытие задач во времени, где задачи разделяют интервалы выполнения, как если бы задачи конкурировали между собой за возможность быть исполненными.',
  },
  {
    title: 'Параллелизм',
    description: 'Строгое одновременное выполнение задач.',
  },
  {
    title: 'Асинхронность',
    description: 'Концепция в программировании, при которой выполнение операций не блокирует последующий код. В асинхронной модели операции могут выполняться параллельно, и программа не ждет завершения одной операции, чтобы начать другую.',
  },
  {
    title: 'Обратный вызов (callback)',
    description: 'Функция в JavaScript, передаваемая в другую функцию в качестве аргумента и выполняемая после завершения определенного действия или события.',
  },
  {
    title: 'Разделяемая память',
    description: 'После создания разделяемого сегмента памяти любой из пользовательских процессов может подсоединить его к своему собственному виртуальному пространству и работать с ним как с обычным сегментом памяти.',
  },
  {
    title: 'Атомарность',
    description: 'Операция атомарна, означает, что, хотя операция может состоять из более мелких шагов, гарантируется, что либо вся она будет выполнена целиком, либо не будет выполнена вовсе',
  },
  
  {
    title: 'Очередь',
    description: 'Абстрактный тип данных с дисциплиной доступа к элементам "первый пришёл — первый вышел" (FIFO).',
  },
  {
    title: 'Канал сообщений',
    description: 'Асинхронный двусторонний канал связи для передачи структурированных данных, областей памяти и других объектов между разными потоками.',
  },

];
